"use strict";(self.webpackChunkdocs_2=self.webpackChunkdocs_2||[]).push([[318],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>h});var o=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,o,a=function(e,r){if(null==e)return{};var t,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)t=n[o],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)t=n[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=o.createContext({}),p=function(e){var r=o.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},c=function(e){var r=p(e.components);return o.createElement(i.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},d=o.forwardRef((function(e,r){var t=e.components,a=e.mdxType,n=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),h=a,k=d["".concat(i,".").concat(h)]||d[h]||u[h]||n;return t?o.createElement(k,l(l({ref:r},c),{},{components:t})):o.createElement(k,l({ref:r},c))}));function h(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var n=t.length,l=new Array(n);l[0]=d;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<n;p++)l[p]=t[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3168:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>p});var o=t(7462),a=(t(7294),t(3905));const n={sidebar_position:31},l=void 0,s={unversionedId:"Contracts/Governance/NRC-31 SubDAO",id:"Contracts/Governance/NRC-31 SubDAO",title:"NRC-31 SubDAO",description:"newcoin.daos creates DAOs on top of existing SubPools, using the tokens of each SubPool as a voting weight mechanism. The SubPool founder is automatically the custodian of the SubDAO and can review proposals and veto them before they get submitted to the DAO.",source:"@site/docs/Contracts/Governance/NRC-31 SubDAO.md",sourceDirName:"Contracts/Governance",slug:"/Contracts/Governance/NRC-31 SubDAO",permalink:"/docs/Contracts/Governance/NRC-31 SubDAO",draft:!1,editUrl:"https://github.com/Newcoin-Foundation/docs/tree/main/packages/docs/Contracts/Governance/NRC-31 SubDAO.md",tags:[],version:"current",sidebarPosition:31,frontMatter:{sidebar_position:31},sidebar:"tutorialSidebar",previous:{title:"NRC-30 MainDAO",permalink:"/docs/Contracts/Governance/NRC-30 MainDAO"},next:{title:"Block production",permalink:"/docs/category/block-production"}},i={},p=[{value:"Create DAOs and proposals",id:"create-daos-and-proposals",level:2},{value:"Create a DAO",id:"create-a-dao",level:3},{value:"Create a DAO Proposal",id:"create-a-dao-proposal",level:3},{value:"Create a DAO Stake Proposal",id:"create-a-dao-stake-proposal",level:3},{value:"Create a DAO Whitelist Proposal",id:"create-a-dao-whitelist-proposal",level:3},{value:"Approve proposals",id:"approve-proposals",level:2},{value:"Approve a DAO Proposal",id:"approve-a-dao-proposal",level:3},{value:"Approve a DAO Whitelist Proposal",id:"approve-a-dao-whitelist-proposal",level:3},{value:"Execute proposals",id:"execute-proposals",level:2},{value:"Execute a DAO Proposal",id:"execute-a-dao-proposal",level:3},{value:"Execute a DAO Whitelist Proposal",id:"execute-a-dao-whitelist-proposal",level:3},{value:"DAO Member calls",id:"dao-member-calls",level:2},{value:"Vote on any DAO Proposal",id:"vote-on-any-dao-proposal",level:3},{value:"withdraw locked tokens in a proposal",id:"withdraw-locked-tokens-in-a-proposal",level:3},{value:"SubDAO Data retrieval",id:"subdao-data-retrieval",level:2},{value:"Get DAO ID by User",id:"get-dao-id-by-user",level:3},{value:"Get DAO proposal by ID",id:"get-dao-proposal-by-id",level:3},{value:"SubDAO List Proposals",id:"subdao-list-proposals",level:2},{value:"List general proposals for a DAO",id:"list-general-proposals-for-a-dao",level:3},{value:"List Whitelist proposals for a DAO",id:"list-whitelist-proposals-for-a-dao",level:3}],c={toc:p};function u(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"newcoin.daos creates DAOs on top of existing SubPools, using the tokens of each SubPool as a voting weight mechanism. The SubPool founder is automatically the custodian of the SubDAO and can review proposals and veto them before they get submitted to the DAO. "),(0,a.kt)("h1",{id:"subdao-actions"},"SubDAO Actions"),(0,a.kt)("p",null,"All SubDAO actions can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Newcoin-Foundation/newcoin-sdk"},"Newcoin-SDK")),(0,a.kt)("h2",{id:"create-daos-and-proposals"},"Create DAOs and proposals"),(0,a.kt)("h3",{id:"create-a-dao"},"Create a DAO"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"You can only create one DAO per User."),(0,a.kt)("br",{parentName:"p"}),"\n","You need to have created a Social Token pool first."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.createDao({\n    author: "satoshi.io", //string;\n    author_prv_key: "<private key>", //string;\n    descr: "My first DAO" //string - cannot be changed afterwards!!!;\n}).then((res) => {\n   console.log("Transaction ID: " + res?.TxID_createDao)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: create_dao: pool does not exist"'),": Create a pool first"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: create_dao : dao already exist"'),": A user can only have one DAO\nTBD"))),(0,a.kt)("h3",{id:"create-a-dao-proposal"},"Create a DAO Proposal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.createDaoProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    proposer: "satoshi.io" //string, required;\n    proposer_prv_key: "<private key>" //string, required;\n    summary: "Summary of the Proposal   " //string, required;\n    title: "Catchy proposal title" //string, required;\n    url: "https://www.moreinfotomyproposal.com" //string, required;\n    vote_start: "2022-08-23" //string, required, ISO8601 - "yyyy-MM-dd";\n    vote_end: "2022-08-30" //string, required, ISO8601 - "yyyy-MM-dd";\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_createDaoProposal)\n    console.log("DAO ID: " + res?.dao_id)\n    console.log("Proposal ID: " + res?.proposal_id)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : vote start shoud be greater then current time"'),": vote_start should be in the future."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : vote end should be greater then vote start"'),": vote_end should be after vote_start."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : proposer is not whitelisted"'),": the proposer needs to be whitelisted first."))),(0,a.kt)("h3",{id:"create-a-dao-stake-proposal"},"Create a DAO Stake Proposal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.createDaoStakeProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    proposer: "satoshi.io" //string, required;\n    proposer_prv_key: "<private key>" //string, required;\n    quantity: "10.0000 VTOKEN" //string, required - Format "#.#### <token>" Token needs to match the to\'s token\n    to: "vitalik.io" //string, required\n    vote_start: "2022-08-23" //string, required, ISO8601 - "yyyy-MM-dd";\n    vote_end: "2022-08-30" //string, required, ISO8601 - "yyyy-MM-dd";\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_createDaoProposal)\n    console.log("Proposal ID: " + res?.proposal_id)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : vote start shoud be greater then current time"'),": vote_start should be in the future."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : vote end should be greater then vote start"'),": vote_end should be after vote_start."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : proposer is not whitelisted"'),": the proposer needs to be whitelisted first."))),(0,a.kt)("h3",{id:"create-a-dao-whitelist-proposal"},"Create a DAO Whitelist Proposal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.createDaoUserWhitelistProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    proposer: "satoshi.io" //string, required;\n    proposer_prv_key: "<private key>" //string, required;\n    user: "vitalik.io" //string, required\n    vote_start: "2022-08-23" //string, required, ISO8601 - "yyyy-MM-dd";\n    vote_end: "2022-08-30" //string, required, ISO8601 - "yyyy-MM-dd";\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_createDaoProposal)\n    console.log("Proposal ID: " + res?.proposal_id)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : vote start shoud be greater then current time"'),": vote_start should be in the future."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : vote end should be greater then vote start"'),": vote_end should be after vote_start."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : proposer is not whitelisted"'),": the proposer needs to be whitelisted first."))),(0,a.kt)("h2",{id:"approve-proposals"},"Approve proposals"),(0,a.kt)("h3",{id:"approve-a-dao-proposal"},"Approve a DAO Proposal"),(0,a.kt)("p",null,"Approver needs to be the DAO-Owner"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.approveDaoProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    approver: "satoshi.io" //string, required;\n    approver_prv_key: "<private key>" //string, required;\n    proposal_id: "123456789" //string, required\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_approveDaoProposal)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : approver is not whitelisted"'),": the proposer needs to be whitelisted first."))),(0,a.kt)("h3",{id:"approve-a-dao-whitelist-proposal"},"Approve a DAO Whitelist Proposal"),(0,a.kt)("p",null,"Approver needs to be the DAO-Owner"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.approveDaoWhitelistProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    approver: "satoshi.io" //string, required;\n    approver_prv_key: "<private key>" //string, required;\n    proposal_id: "123456789" //string, required\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_approveDaoProposal)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : approver is not whitelisted"'),": the proposer needs to be whitelisted first."))),(0,a.kt)("h2",{id:"execute-proposals"},"Execute proposals"),(0,a.kt)("h3",{id:"execute-a-dao-proposal"},"Execute a DAO Proposal"),(0,a.kt)("p",null,"Executor needs to be the DAO-Owner"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.executeDaoProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    exec: "satoshi.io" //string, required;\n    exec_prv_key: "<private key>" //string, required;\n    proposal_id: "123456789" //string, required\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_executeDaoProposal)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."))),(0,a.kt)("h3",{id:"execute-a-dao-whitelist-proposal"},"Execute a DAO Whitelist Proposal"),(0,a.kt)("p",null,"Executor needs to be the DAO-Owner"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.executeDaoWhitelistProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    exec: "satoshi.io" //string, required;\n    exec_prv_key: "<private key>" //string, required;\n    proposal_id: "123456789" //string, required\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_executeDaoProposal)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."))),(0,a.kt)("h2",{id:"dao-member-calls"},"DAO Member calls"),(0,a.kt)("h3",{id:"vote-on-any-dao-proposal"},"Vote on any DAO Proposal"),(0,a.kt)("p",null,"Voter needs to be a DAO member and the token locked needs to be from the DAO"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.voteOnProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    option: "nakamoto.io" //string, reqired - needs to be of [standart|stake|nft|inflate|deflate|whitelist]\n    voter: "satoshi.io" //string, required;\n    voter_prv_key: "<private key>" //string, required;\n    quantity: "10.0000 DAOCOIN" //string, required - need to be in the coin of the DAO\n    proposal_id: "123456789" //string, required\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_executeDaoProposal)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."))),(0,a.kt)("h3",{id:"withdraw-locked-tokens-in-a-proposal"},"withdraw locked tokens in a proposal"),(0,a.kt)("p",null,"Voter needs to be a DAO member and needs to have voted on the proposal.",(0,a.kt)("br",{parentName:"p"}),"\n","Call ",(0,a.kt)("inlineCode",{parentName:"p"},"getVotes")," to recieve all open votes ready for withdraw"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.voteOnProposal({\n    voter: "satoshi.io" //string, required;\n    voter_prv_key: "<private key>" //string, required;\n    vote_id: "123456789" //string, required\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_executeDaoProposal)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."))),(0,a.kt)("h2",{id:"subdao-data-retrieval"},"SubDAO Data retrieval"),(0,a.kt)("h3",{id:"get-dao-id-by-user"},"Get DAO ID by User"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'    const nco = new NCO_BlockchainAPI(\n        NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n    );\n    nco.getDaoIdByOwner(name).catch((reason) => {\n        console.log("Blockchain Error: " + reason);\n    }).then((res: any ) => {\n        if(res){\n            console.log("TX ID: " + res.TxID_createDao )\n            console.log("DAO ID: ",res.dao_id)\n            console.log("full response: ",res)\n            console.log(res?.acc_balances?.error?.details)\n        } else {\n            console.log("NO RESULT seems error has occured")\n        }\n    })\n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: - Errors: no dao exist"),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: User has no dao"'),": The user has no DAO, create a DAO first."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Name not properly normalized'),": The owner is probably not existing."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Cannot read properties of undefiend'),": The owner is probably not existing. (We currently look into that case)"))),(0,a.kt)("h3",{id:"get-dao-proposal-by-id"},"Get DAO proposal by ID"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'    const nco = new NCO_BlockchainAPI(\n        NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n    );\n    nco.getDaoProposal({\n        dao_owner: "satoshi.io", //can be undefined if you use the dao_id instead.\n        dao_id: undefined,\n        proposal_id: "1234" //text, required\n    }).catch((reason) => {\n        console.log("Blockchain Error: " + reason);\n    }).then((res: any ) => {\n        if(res){\n            console.log("TX ID: " + res.TxID_createDao )\n            console.log("DAO ID: ",res.dao_id)\n            console.log("full response: ",res)\n            console.log(res?.acc_balances?.error?.details)\n        } else {\n            console.log("NO RESULT seems error has occured")\n        }\n    })\n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: - Errors: no dao exist"),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: User has no dao"'),": The user has no DAO, create a DAO first."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Name not properly normalized'),": The owner is probably not existing."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Cannot read properties of undefiend'),": The owner is probably not existing. (We currently look into that case)"))),(0,a.kt)("h2",{id:"subdao-list-proposals"},"SubDAO List Proposals"),(0,a.kt)("h3",{id:"list-general-proposals-for-a-dao"},"List general proposals for a DAO"),(0,a.kt)("p",null,"List any amount of general proposals for a DAO.",(0,a.kt)("br",{parentName:"p"}),"\n","You need to limit the call to one DAO, by either provide the dao_owner or the dao_id, everything else is optional.  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'    nco.listDaoProposals({\n        dao_owner: "satoshi.io", //can be undefined if you use the dao_id instead.\n        dao_id: undefined,\n        limit: 10, //optional, default is 10, how many results to be returned, can be undefined.\n        lower_bound: undefined, //text, optional, on what index to start. normally used with limit\n        upper_bound: undefined, //text, optional, on what index to start. normally used with limit and reverse=true\n        reverse: false, //if true, returns the last 10 proposals\n        proposal_author: undefined, //limit to a specific author\n        proposal_id: undefined //limit by proposal id, basically returns only 1. \n    }).catch((reason) => {\n        console.log("Blockchain Error: " + reason);\n    }).then((res: any ) => {\n        if(res){\n            console.log("DAO ID: ",res.id)\n            console.log("proposals: ",res.list)\n            console.log(res?.acc_balances?.error?.details)\n        } else {\n            console.log("NO RESULT seems error has occured")\n        }\n    })\n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: - Errors: no dao exist"),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: User has no dao"'),": The user has no DAO, create a DAO first."))),(0,a.kt)("h3",{id:"list-whitelist-proposals-for-a-dao"},"List Whitelist proposals for a DAO"),(0,a.kt)("p",null,"List any amount of whitelist proposals for a DAO.",(0,a.kt)("br",{parentName:"p"}),"\n","You need to limit the call to one DAO, by either provide the dao_owner or the dao_id, everything else is optional.  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'    nco.listDaoWhitelistProposals({\n        dao_owner: "satoshi.io", //can be undefined if you use the dao_id instead.\n        dao_id: undefined,\n        limit: 10, //optional, default is 10, how many results to be returned, can be undefined.\n        lower_bound: undefined, //text, optional, on what index to start. normally used with limit\n        upper_bound: undefined, //text, optional, on what index to start. normally used with limit and reverse=true\n        reverse: false, //if true, returns the last 10 proposals\n        proposal_author: undefined, //limit to a specific author\n        proposal_id: undefined //limit by proposal id, basically returns only 1. \n    }).catch((reason) => {\n        console.log("Blockchain Error: " + reason);\n    }).then((res: any ) => {\n        if(res){\n            console.log("DAO ID: ",res.id)\n            console.log("proposals: ",res.list)\n            console.log(res?.acc_balances?.error?.details)\n        } else {\n            console.log("NO RESULT seems error has occured")\n        }\n    })\n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: - Errors: no dao exist"),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: User has no dao"'),": The user has no DAO, create a DAO first."))))}u.isMDXComponent=!0}}]);