"use strict";(self.webpackChunkdocs_2=self.webpackChunkdocs_2||[]).push([[190],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,h=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8437:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:11},s=void 0,i={unversionedId:"Contracts/Identity/NRC-11 NFT Assets",id:"Contracts/Identity/NRC-11 NFT Assets",title:"NRC-11 NFT Assets",description:"The NFT assets contract can be used to",source:"@site/docs/Contracts/Identity/NRC-11 NFT Assets.md",sourceDirName:"Contracts/Identity",slug:"/Contracts/Identity/NRC-11 NFT Assets",permalink:"/docs/Contracts/Identity/NRC-11 NFT Assets",draft:!1,editUrl:"https://github.com/Newcoin-Foundation/docs/tree/main/packages/docs/Contracts/Identity/NRC-11 NFT Assets.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"NRC-10 UNS",permalink:"/docs/Contracts/Identity/NRC-10 UNS"},next:{title:"NRC-12 Encrypted Data storage",permalink:"/docs/Contracts/Identity/NRC-12 Encrypted Data storage"}},l={},c=[{value:"Mint Generic Asset",id:"mint-generic-asset",level:2},{value:"Create a Collection",id:"create-a-collection",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The NFT assets contract can be used to\ncreate a new collection with custom schema\nMint, burn or transfer NFTs\nMint backed NFTs holding tokens\nDirect sale/purchase of an NFT between two use"),(0,a.kt)("h1",{id:"nft-actions"},"NFT Actions"),(0,a.kt)("h2",{id:"mint-generic-asset"},"Mint Generic Asset"),(0,a.kt)("p",null,"This is the basic generic mint function, that enables you to mint any type of NFT structure.",(0,a.kt)("br",{parentName:"p"}),"\n","Please note, that the account needs to have at least 1 collection before. so it is recommended to check for collections first.  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"nco.mintAsset({ \n            creator: \"satoshi.io\", \n        payer: \"satoshi.io\", \n            payer_prv_key: \"<private key>\", \n            immutable_data: [\n                {'key': 'name', 'value': ['string', 'Demo NFT-'+(new Date()).getTime()]},\n                {'key': 'description','value': ['string', 'demo nft']}, \n                {'key': 'image','value': ['string', 'https://lh3.googleusercontent.com/1gqAWnic2dGMSVC2mcHCWTK2aIfYBtKS5GFpsNryT6Gtxhj6_H_x7a14AnfA__nn_TWvI1Ankv90mj49JZa0G7QUkafOv4Tb31Z_8ZQ=s0']},\n                {'key': \"external_url\",'value':['string', '']},\n                {'key': 'content_type','value':['string', 'text']},\n                {'key': 'content','value':['string', \"test\"]},\n                {'key': \"license\",'value':['string', 'CC-EX-123456']},\n                //{'key': \"template_name\"}, {'value': ['string', '']},\n                //{'key': \"attributes\"}, { 'value': ['string[]', []] }\n              ],\n            mutable_data: [\n                //{'key': 'storage', 'value': ['string', test]}\n            ]\n    }).catch((reason) => {\n        console.log(\"Blockchain Error: \" + reason);\n    }).then((res: any ) => {\n        if(res){\n            console.log(\"transaction ID: \" + res.TxID_mintAsset)\n            console.log(\"full response: \",res)\n        } else {\n            console.log(\"NO RESULT seems error has occured\")\n        }\n    })\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: assertion failure with message: No collection with this name exists"'),": The creator has no collection. See create collection.  "))),(0,a.kt)("h2",{id:"create-a-collection"},"Create a Collection"),(0,a.kt)("p",null,"All NFTs and Assets need to be stored in a collection, that give it its market abilities.  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'nco.createCollection({ \n            user: "satoshi.io", \n            user_prv_active_key: "<private key>", \n            collection_name: "my.First.Col", //max 13 chars\n            schema_name: "defSchema", //max 13 chars\n            schema_fields: default_schema,\n            template_name: "defTemplate", //max 13 chars\n            template_fields: [], //template fields are higher ranked than asset fields - see Data Precedence\n            allow_notify: true,\n            mkt_fee    : 0.05,\n            xferable   : true, //If false, Assets in the collection cannot be transferred, and therefore is Soulbound\n            burnable   : true, //If false, Assets in the collection cannot be destroyed again.\n            max_supply : 0xffff \n    }).catch((reason) => {\n        console.log("Blockchain Error: " + reason);\n    }).then((res: any ) => {\n        if(res){\n            console.log("transactions Collection: {0}, Schema: {1}, Template: {2}", res.TxID_createCol, res.TxID_createSch, res.TxID_createTpl)\n            console.log("full response: ",res)\n        } else {\n            console.log("NO RESULT seems error has occured")\n        }\n    })\n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Name should be less than 13 characters,..."'),": Check Collection Name, Schema Name, Template Name to be only lowercase and less than 13 chars long."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: assertion failure with message: collection names must be 12 characters long"'),': Collection names must be exactly 12 char long and only contains lowercase characters or "."'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: assertion failure with message: When the collection name has a suffix, the suffix authorization is required"'),":Remove the . characters from the name, or provide the authorization first."))))}p.isMDXComponent=!0}}]);