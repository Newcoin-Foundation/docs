"use strict";(self.webpackChunkdocs_2=self.webpackChunkdocs_2||[]).push([[111],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(y,c(c({ref:t},p),{},{components:n})):a.createElement(y,c({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var s=2;s<o;s++)c[s]=n[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6831:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2},c=void 0,i={unversionedId:"Guides/Create an Account",id:"Guides/Create an Account",title:"Create an Account",description:"Prerequirements to create an account",source:"@site/docs/Guides/Create an Account.md",sourceDirName:"Guides",slug:"/Guides/Create an Account",permalink:"/Guides/Create an Account",draft:!1,editUrl:"https://github.com/newfound8ion/docs/tree/main/docs/Guides/Create an Account.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Building on Newcoin",permalink:"/Guides/Building on Newcoin"},next:{title:"Setup your Wallets on Testnet",permalink:"/Guides/Setup your Wallets on Testnet"}},l={},s=[{value:"Prerequirements to create an account",id:"prerequirements-to-create-an-account",level:2},{value:"Active/Owner accounts",id:"activeowner-accounts",level:3},{value:"Naming conventions",id:"naming-conventions",level:3},{value:"Newcoin Features",id:"newcoin-features",level:2},{value:"Full code example",id:"full-code-example",level:2},{value:"Init Variables",id:"init-variables",level:3},{value:"Create Account",id:"create-account",level:3},{value:"Stake GNCO",id:"stake-gnco",level:3},{value:"Create Pool",id:"create-pool",level:3},{value:"Create DAO",id:"create-dao",level:3},{value:"Stake into your pool",id:"stake-into-your-pool",level:3},{value:"Next Steps",id:"next-steps",level:2}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"prerequirements-to-create-an-account"},"Prerequirements to create an account"),(0,r.kt)("p",null,"Account creation on Newcoin requires 3 things:  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a generated public and private key for the owner account"),(0,r.kt)("li",{parentName:"ul"},"a generated public and private key for the active account"),(0,r.kt)("li",{parentName:"ul"},"a name that is compliant with the naming convention"),(0,r.kt)("li",{parentName:"ul"},"a ticker symbol"),(0,r.kt)("li",{parentName:"ul"},"a sponsor (payer) for funding the resources needed to create the account")),(0,r.kt)("h3",{id:"activeowner-accounts"},"Active/Owner accounts"),(0,r.kt)("p",null,"Newcoin has an advanced system for privacy preservation that enables you to have multiple identities with a single wallet. You can show to one dApp only a partial collection of your NFTs or give another dApp only a partial permission on your assets (e.g. post but not transfer). The Owner is the master account, and it's private key should be stored as good as possible (e.g. on a cold storage), as, if in any case, the active private key would potentially be compromised, you can reset it with your owner keys.",(0,r.kt)("br",{parentName:"p"}),"\n","Read more in our Guide about ",(0,r.kt)("a",{parentName:"p",href:"./Deep%20Dive/Active%20Owner%20Accounts"},"Active Owner Accounts"),".",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"We strongly recommend generating 2 different keysets. It can also be both the same keyset.")),(0,r.kt)("h3",{id:"naming-conventions"},"Naming conventions"),(0,r.kt)("p",null,"An account name on Newcoin has 2 parts: the Name, and the Extension."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'The default extension is ".io" - the extension is part of the length of the name.'),(0,r.kt)("li",{parentName:"ul"},"The payer needs to have authorization to create accounts with that extension. "),(0,r.kt)("li",{parentName:"ul"},"the name can be 13 chars long"),(0,r.kt)("li",{parentName:"ul"},'and it can contain a-z, 1-5 and "."')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-regex"},"/(^[a-z1-5.]{1,11}[a-z1-5]$)|(^[a-z1-5.]{12}[a-j1-5]$) /g\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"You maybe spotted, that a name can actually be 13 chars, but the 13th has higher limitations.")),(0,r.kt)("h2",{id:"newcoin-features"},"Newcoin Features"),(0,r.kt)("p",null,"On Newcoin, every account can have:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"exactly 1 pool"),(0,r.kt)("li",{parentName:"ul"},"exactly 1 DAO with a token")),(0,r.kt)("p",null,"To create a pool and a Token, you first need to have $GNCO in your account.",(0,r.kt)("br",{parentName:"p"}),"\n","Therefore to enable all account features, we recommend to use this order:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create Account"),(0,r.kt)("li",{parentName:"ol"},"Stake GNCO"),(0,r.kt)("li",{parentName:"ol"},"Create pool"),(0,r.kt)("li",{parentName:"ol"},"Create DAO")),(0,r.kt)("h2",{id:"full-code-example"},"Full code example"),(0,r.kt)("h3",{id:"init-variables"},"Init Variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'let ownerKeypair = await nco.createKeyPair();\nlet activeKeypair = await nco.createKeyPair();\nlet name = "nakamoto.io";\nconsole.log("Keys owner generated: \\n Prv: %s \\n Pub: %s\\n", ownerKeypair.prv_key, ownerKeypair.pub_key);\nconsole.log("Keys active generated: \\n Prv: %s \\n Pub: %s\\n", activeKeypair.prv_key, activeKeypair.pub_key);\nconst nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\n\n\n')),(0,r.kt)("h3",{id:"create-account"},"Create Account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'nco.createUser({\n    newUser: name, \n    newacc_pub_active_key: activeKeypair.pub_key,\n    newacc_pub_owner_key:  ownerKeypair.pub_key,\n    payer: "satoshi.io", \n    payer_prv_key: "<private key>",\n    ram_amt : 8196, \n    cpu_amount : "100.0000 NCO", \n    net_amount : "100.0000 NCO", \n    xfer : true, // stake or transfer CPU/NET to the account\n}).catch((reason) => {\n    console.log("Blockchain Error: " + reason);\n}).then((res: any ) => {\n    if(res){\n        console.log("transaction ID: " + res.TxID_createAcc)\n        console.log("full response: ",res)\n    } else {\n        console.log("NO RESULT seems error has occured")\n    }\n})\n')),(0,r.kt)("h3",{id:"stake-gnco"},"Stake GNCO"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'nco.stakeMainDAO({\n    amt: "10.0000 NCO" //string;\n    payer: name //string;\n    payer_prv_key: activeKeypair.prv_key //string;\n}).then((res) => {\n    console.log("Transaction ID: " + res.TxID_stakeMainDAO)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,r.kt)("h3",{id:"create-pool"},"Create Pool"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'nco.createPool({\n        owner: name, //string;\n        owner_prv_active_key:  activeKeypair.prv_key, //string;\n        ticker: "NKA" //string - cannot be changed afterwards!!!;\n    }).then((res) => {\n   console.log("Transaction ID: " + res?.TxID_createPool)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,r.kt)("h3",{id:"create-dao"},"Create DAO"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'nco.createDao({\n    author: name, //string;\n    author_prv_key: activeKeypair.prv_key, //string;\n    descr: "My first DAO" //string - cannot be changed afterwards!!!;\n}).then((res) => {\n   console.log("Transaction ID: " + res?.TxID_createDao)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,r.kt)("h3",{id:"stake-into-your-pool"},"Stake into your pool"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'nco.stakePool({\n        owner: name, //string;\n        payer:  name, //as it is my own pool, owner and payer are the same;\n        payer_prv_key:  activeKeypair.prv_key, //string;\n        amt: "10.0000 GNCO" //string always in the format of "#.#### GNCO"\n    }).then((res) => {\n   console.log("Transaction ID: " + res?.TxID_stakePool)\n   console.log("Pool ID: " + res?.pool_id)\n   console.log("Pool Code: " + res?.pool_code)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,r.kt)("h2",{id:"next-steps"},"Next Steps"),(0,r.kt)("p",null,"Typically, after creating your DAO you maybe want to whitelist some potential DAO members to invite, or start minting NFTs for sale."))}u.isMDXComponent=!0}}]);