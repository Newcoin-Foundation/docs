"use strict";(self.webpackChunkdocs_2=self.webpackChunkdocs_2||[]).push([[4834],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var o=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),h=a,k=d["".concat(s,".").concat(h)]||d[h]||u[h]||n;return r?o.createElement(k,i(i({ref:t},c),{},{components:r})):o.createElement(k,i({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,i=new Array(n);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<n;p++)i[p]=r[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2952:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>l,toc:()=>p});var o=r(7462),a=(r(7294),r(3905));const n={sidebar_position:31},i=void 0,l={unversionedId:"Smart Contracts/NRC-31 SubDAO",id:"Smart Contracts/NRC-31 SubDAO",title:"NRC-31 SubDAO",description:"newcoin.daos creates DAOs on top of existing SubPools, using the tokens of each SubPool as a voting weight mechanism. The SubPool founder is automatically the custodian of the SubDAO and can review proposals and veto them before they get submitted to the DAO.",source:"@site/docs/Smart Contracts/NRC-31 SubDAO.md",sourceDirName:"Smart Contracts",slug:"/Smart Contracts/NRC-31 SubDAO",permalink:"/docs/docs/Smart Contracts/NRC-31 SubDAO",draft:!1,editUrl:"https://github.com/Newcoin-Foundation/docs/tree/main/packages/docs/Smart Contracts/NRC-31 SubDAO.md",tags:[],version:"current",sidebarPosition:31,frontMatter:{sidebar_position:31},sidebar:"tutorialSidebar",previous:{title:"NRC-30 MainDAO",permalink:"/docs/docs/Smart Contracts/NRC-30 MainDAO"},next:{title:"SDKs",permalink:"/docs/docs/category/sdks"}},s={},p=[{value:"Create DAOs and proposals",id:"create-daos-and-proposals",level:2},{value:"Create a DAO",id:"create-a-dao",level:3},{value:"Create a DAO Proposal",id:"create-a-dao-proposal",level:3},{value:"Create a DAO Stake Proposal",id:"create-a-dao-stake-proposal",level:3},{value:"Create a DAO Whitelist Proposal",id:"create-a-dao-whitelist-proposal",level:3},{value:"Approve proposals",id:"approve-proposals",level:2},{value:"Approve a DAO Proposal",id:"approve-a-dao-proposal",level:3},{value:"Approve a DAO Whitelist Proposal",id:"approve-a-dao-whitelist-proposal",level:3},{value:"Execute proposals",id:"execute-proposals",level:2},{value:"Execute a DAO Proposal",id:"execute-a-dao-proposal",level:3},{value:"Execute a DAO Whitelist Proposal",id:"execute-a-dao-whitelist-proposal",level:3},{value:"DAO Member calls",id:"dao-member-calls",level:2},{value:"Vote on any DAO Proposal",id:"vote-on-any-dao-proposal",level:3},{value:"withdraw locked tokens in a proposal",id:"withdraw-locked-tokens-in-a-proposal",level:3}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"newcoin.daos creates DAOs on top of existing SubPools, using the tokens of each SubPool as a voting weight mechanism. The SubPool founder is automatically the custodian of the SubDAO and can review proposals and veto them before they get submitted to the DAO. "),(0,a.kt)("h1",{id:"subdao-actions"},"SubDAO Actions"),(0,a.kt)("p",null,"All SubDAO actions can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Newcoin-Foundation/newcoin-sdk"},"Newcoin-SDK")),(0,a.kt)("h2",{id:"create-daos-and-proposals"},"Create DAOs and proposals"),(0,a.kt)("h3",{id:"create-a-dao"},"Create a DAO"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"You can only create one DAO per User.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.createDAO({\n    author: "satoshi.io" //string;\n    author_prv_key: "<private key>" //string;\n    descr: "My first DAO" //string - cannot be changed afterwards!!!;\n}).then((res) => {\n   console.log("Transaction ID: " + res?.TxID_createDao)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match.")),(0,a.kt)("p",null,"TBD")),(0,a.kt)("h3",{id:"create-a-dao-proposal"},"Create a DAO Proposal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.createDaoProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    proposer: "satoshi.io" //string, required;\n    proposer_prv_key: "<private key>" //string, required;\n    summary: "Summary of the Proposal   " //string, required;\n    title: "Catchy proposal title" //string, required;\n    url: "https://www.moreinfotomyproposal.com" //string, required;\n    vote_start: "2022-08-23" //string, required, ISO8601 - "yyyy-MM-dd";\n    vote_end: "2022-08-30" //string, required, ISO8601 - "yyyy-MM-dd";\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_createDaoProposal)\n    console.log("DAO ID: " + res?.dao_id)\n    console.log("Proposal ID: " + res?.proposal_id)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : vote start shoud be greater then current time"'),": vote_start should be in the future."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : vote end should be greater then vote start"'),": vote_end should be after vote_start."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : proposer is not whitelisted"'),": the proposer needs to be whitelisted first."))),(0,a.kt)("h3",{id:"create-a-dao-stake-proposal"},"Create a DAO Stake Proposal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.createDaoStakeProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    proposer: "satoshi.io" //string, required;\n    proposer_prv_key: "<private key>" //string, required;\n    quantity: "10.0000 vtoken" //string, required - Format "#.#### <token>" Token needs to match the to\'s token\n    to: "vitalik.io" //string, required\n    vote_start: "2022-08-23" //string, required, ISO8601 - "yyyy-MM-dd";\n    vote_end: "2022-08-30" //string, required, ISO8601 - "yyyy-MM-dd";\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_createDaoProposal)\n    console.log("Proposal ID: " + res?.proposal_id)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : vote start shoud be greater then current time"'),": vote_start should be in the future."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : vote end should be greater then vote start"'),": vote_end should be after vote_start."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : proposer is not whitelisted"'),": the proposer needs to be whitelisted first."))),(0,a.kt)("h3",{id:"create-a-dao-whitelist-proposal"},"Create a DAO Whitelist Proposal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.createDaoUserWhitelistProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    proposer: "satoshi.io" //string, required;\n    proposer_prv_key: "<private key>" //string, required;\n    user: "vitalik.io" //string, required\n    vote_start: "2022-08-23" //string, required, ISO8601 - "yyyy-MM-dd";\n    vote_end: "2022-08-30" //string, required, ISO8601 - "yyyy-MM-dd";\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_createDaoProposal)\n    console.log("Proposal ID: " + res?.proposal_id)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : vote start shoud be greater then current time"'),": vote_start should be in the future."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : vote end should be greater then vote start"'),": vote_end should be after vote_start."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : proposer is not whitelisted"'),": the proposer needs to be whitelisted first."))),(0,a.kt)("h2",{id:"approve-proposals"},"Approve proposals"),(0,a.kt)("h3",{id:"approve-a-dao-proposal"},"Approve a DAO Proposal"),(0,a.kt)("p",null,"Approver needs to be the DAO-Owner"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.approveDaoProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    approver: "satoshi.io" //string, required;\n    approver_prv_key: "<private key>" //string, required;\n    proposal_id: "123456789" //string, required\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_approveDaoProposal)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : approver is not whitelisted"'),": the proposer needs to be whitelisted first."))),(0,a.kt)("h3",{id:"approve-a-dao-whitelist-proposal"},"Approve a DAO Whitelist Proposal"),(0,a.kt)("p",null,"Approver needs to be the DAO-Owner"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.approveDaoWhitelistProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    approver: "satoshi.io" //string, required;\n    approver_prv_key: "<private key>" //string, required;\n    proposal_id: "123456789" //string, required\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_approveDaoProposal)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"create_proposal : approver is not whitelisted"'),": the proposer needs to be whitelisted first."))),(0,a.kt)("h2",{id:"execute-proposals"},"Execute proposals"),(0,a.kt)("h3",{id:"execute-a-dao-proposal"},"Execute a DAO Proposal"),(0,a.kt)("p",null,"Executor needs to be the DAO-Owner"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.executeDaoProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    exec: "satoshi.io" //string, required;\n    exec_prv_key: "<private key>" //string, required;\n    proposal_id: "123456789" //string, required\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_executeDaoProposal)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."))),(0,a.kt)("h3",{id:"execute-a-dao-whitelist-proposal"},"Execute a DAO Whitelist Proposal"),(0,a.kt)("p",null,"Executor needs to be the DAO-Owner"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.executeDaoWhitelistProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    exec: "satoshi.io" //string, required;\n    exec_prv_key: "<private key>" //string, required;\n    proposal_id: "123456789" //string, required\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_executeDaoProposal)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."))),(0,a.kt)("h2",{id:"dao-member-calls"},"DAO Member calls"),(0,a.kt)("h3",{id:"vote-on-any-dao-proposal"},"Vote on any DAO Proposal"),(0,a.kt)("p",null,"Voter needs to be a DAO member and the token locked needs to be from the DAO"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.voteOnProposal({\n    dao_id?: "12345" //string, optional; you have to provide either the dao_id or the dao_owner handle.\n    dao_owner?: "nakamoto.io" //string, optional;\n    option: "nakamoto.io" //string, reqired - needs to be of [standart|stake|nft|inflate|deflate|whitelist]\n    voter: "satoshi.io" //string, required;\n    voter_prv_key: "<private key>" //string, required;\n    quantity: "10.0000 DAOCOIN" //string, required - need to be in the coin of the DAO\n    proposal_id: "123456789" //string, required\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_executeDaoProposal)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."))),(0,a.kt)("h3",{id:"withdraw-locked-tokens-in-a-proposal"},"withdraw locked tokens in a proposal"),(0,a.kt)("p",null,"Voter needs to be a DAO member and needs to have voted on the proposal.",(0,a.kt)("br",{parentName:"p"}),"\n","Call ",(0,a.kt)("inlineCode",{parentName:"p"},"getVotes")," to recieve all open votes ready for withdraw"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.voteOnProposal({\n    voter: "satoshi.io" //string, required;\n    voter_prv_key: "<private key>" //string, required;\n    vote_id: "123456789" //string, required\n}).then((res) => {\n    console.log("Transaction ID: " + res?.TxID_executeDaoProposal)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."))))}u.isMDXComponent=!0}}]);