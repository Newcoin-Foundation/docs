"use strict";(self.webpackChunkdocs_2=self.webpackChunkdocs_2||[]).push([[351],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>k});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(o),k=n,y=d["".concat(s,".").concat(k)]||d[k]||u[k]||a;return o?r.createElement(y,l(l({ref:t},p),{},{components:o})):r.createElement(y,l({ref:t},p))}));function k(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var c=2;c<a;c++)l[c]=o[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},8168:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=o(7462),n=(o(7294),o(3905));const a={sidebar_position:23},l=void 0,i={unversionedId:"Contracts/Market/NRC-23 SubPool",id:"Contracts/Market/NRC-23 SubPool",title:"NRC-23 SubPool",description:"newcoin.pools contract swaps $GNCO for Licensing Credit Tokens LCT, which represent a fraction of ownership for all the assets owned by the treasury of the pool, especially all the $GNCO staked by the SubPool creator, their fans, clients and patrons.",source:"@site/docs/Contracts/Market/NRC-23 SubPool.md",sourceDirName:"Contracts/Market",slug:"/Contracts/Market/NRC-23 SubPool",permalink:"/docs/Contracts/Market/NRC-23 SubPool",draft:!1,editUrl:"https://github.com/Newcoin-Foundation/docs/tree/main/packages/docs/Contracts/Market/NRC-23 SubPool.md",tags:[],version:"current",sidebarPosition:23,frontMatter:{sidebar_position:23},sidebar:"tutorialSidebar",previous:{title:"NRC-22 MainPool",permalink:"/docs/Contracts/Market/NRC-22 MainPool"},next:{title:"NRC-24 Socializer",permalink:"/docs/Contracts/Market/NRC-24 Socializer"}},s={},c=[{value:"Pool Actions",id:"pool-actions",level:2},{value:"Create a Pool",id:"create-a-pool",level:3},{value:"Stake into a pool",id:"stake-into-a-pool",level:3},{value:"Unstake from a pool",id:"unstake-from-a-pool",level:3},{value:"Pool Data",id:"pool-data",level:2},{value:"Get Pool Info",id:"get-pool-info",level:3}],p={toc:c};function u(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"newcoin.pools contract swaps $GNCO for Licensing Credit Tokens LCT, which represent a fraction of ownership for all the assets owned by the treasury of the pool, especially all the $GNCO staked by the SubPool creator, their fans, clients and patrons. "),(0,n.kt)("h2",{id:"pool-actions"},"Pool Actions"),(0,n.kt)("h3",{id:"create-a-pool"},"Create a Pool"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"You can only create one pool per User."),"  "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.createPool({\n        owner: "satoshi.io", //string;\n        owner_prv_active_key:  "<private key>", //string;\n        ticker: "wBTC" //string - cannot be changed afterwards!!!;\n    }).then((res) => {\n   console.log("Transaction ID: " + res?.TxID_createPool)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Requires: private key, Errors: auth"),(0,n.kt)("p",null,"Requires: Authorization from Account "),(0,n.kt)("p",null,"Errors: "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: create_dao: pool already exist"'),": Only one pool per user allowed, and there is one already existing."))),(0,n.kt)("h3",{id:"stake-into-a-pool"},"Stake into a pool"),(0,n.kt)("p",null,"In SubPools you only can stake GNCO - therefore the Token code should not be changed. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.stakePool({\n        owner: "satoshi.io", //string;\n        payer:  "<private key>", //string;\n        payer_prv_key:  "<private key>", //string;\n        amt: "10.0000 GNCO" //string always in the format of "#.#### GNCO"\n    }).then((res) => {\n   console.log("Transaction ID: " + res?.TxID_stakePool)\n   console.log("Pool ID: " + res?.pool_id)\n   console.log("Pool Code: " + res?.pool_code)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Requires: private key, Errors: auth"),(0,n.kt)("p",null,"Requires: Authorization from Account "),(0,n.kt)("p",null,"Errors: "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: create_dao: pool already exist"'),": Only one pool per user allowed, and there is one already existing."))),(0,n.kt)("h3",{id:"unstake-from-a-pool"},"Unstake from a pool"),(0,n.kt)("p",null,"The pool to unstake from is decided by the Token Symbol in the amt param."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.unstakePool({\n        payer:  "<private key>", //string;\n        payer_prv_key:  "<private key>", //string;\n        amt: "10.0000 wBTC" //string always in the format of "#.#### Token"\n    }).then((res) => {\n   console.log("Transaction ID: " + res?.TxID_stakePool)\n   console.log("Pool ID: " + res?.pool_id)\n   console.log("Pool Code: " + res?.pool_code)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Requires: private key, Errors: auth"),(0,n.kt)("p",null,"Requires: Authorization from Account "),(0,n.kt)("p",null,"Errors: "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: create_dao: pool already exist"'),": Only one pool per user allowed, and there is one already existing."))),(0,n.kt)("h2",{id:"pool-data"},"Pool Data"),(0,n.kt)("h3",{id:"get-pool-info"},"Get Pool Info"),(0,n.kt)("p",null,"The pool info can be either retrieved by the Owners Name or by Pool ID. Only one of the params need to be provided."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.getPoolInfo({\n        owner: "satoshi.io", //string, optional\n        code:  undefined, //string, optional\n    }).then((res) => {\n   console.log("Pool Code: " + res?.rows[0]?.code)\n   console.log("Pool Desc: " + res?.rows[0]?.description)\n   console.log("Pool Totals: " + res?.rows[0]?.total?.quantity) // always calculated in GNCO\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Requires: -, Errors: no pool found"),(0,n.kt)("p",null,"Errors: "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: create_dao: pool already exist"'),": Only one pool per user allowed, and there is one already existing."))))}u.isMDXComponent=!0}}]);