"use strict";(self.webpackChunkdocs_2=self.webpackChunkdocs_2||[]).push([[579],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9524:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:30},i=void 0,c={unversionedId:"Contracts/Governance/NRC-30 MainDAO",id:"Contracts/Governance/NRC-30 MainDAO",title:"NRC-30 MainDAO",description:"newcoin.dao contract is the MainDAO in charge for making infrastructure-level decisions, in particular related to:",source:"@site/docs/Contracts/Governance/NRC-30 MainDAO.md",sourceDirName:"Contracts/Governance",slug:"/Contracts/Governance/NRC-30 MainDAO",permalink:"/Contracts/Governance/NRC-30 MainDAO",draft:!1,editUrl:"https://github.com/newfound8ion/docs/tree/main/docs/Contracts/Governance/NRC-30 MainDAO.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"Governance",permalink:"/category/governance"},next:{title:"NRC-31 SubDAO",permalink:"/Contracts/Governance/NRC-31 SubDAO"}},l={},s=[{value:"Whitelisting",id:"whitelisting",level:2},{value:"Stake to the MainPool",id:"stake-to-the-mainpool",level:3}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"newcoin.dao contract is the MainDAO in charge for making infrastructure-level decisions, in particular related to:\nthe allocation of MainDAO treasury to fund specific proposals\nthe deployment of new Standardized smart contracts"),(0,a.kt)("h1",{id:"maindao-actions"},"MainDAO Actions"),(0,a.kt)("p",null,"All MainPool actions can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Newcoin-Foundation/newcoin-sdk"},"Newcoin-SDK")),(0,a.kt)("h2",{id:"whitelisting"},"Whitelisting"),(0,a.kt)("p",null,"TBD"),(0,a.kt)("h3",{id:"stake-to-the-mainpool"},"Stake to the MainPool"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.stakeMainDAO({\n    amt: "10.0000 NCO" //string;\n    payer: "satoshi.io" //string;\n    payer_prv_key: "<private key>" //string;\n}).then((res) => {\n   console.log("Transaction ID: " + res.TxID_stakeMainDAO)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Requires: private key, Errors: auth, negative amt"),(0,a.kt)("p",null,"Requires: Authorization from Account "),(0,a.kt)("p",null,"Errors: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"do_stake : amount in should be positive"'),": the amount in amt should be positive"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"Error: Expected symbol to be A-Z and between one and seven characters"'),': the amt needs to be in the Format "#.#### NCO"'))))}u.isMDXComponent=!0}}]);