"use strict";(self.webpackChunkdocs_2=self.webpackChunkdocs_2||[]).push([[351],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),s=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(r),f=n,y=d["".concat(l,".").concat(f)]||d[f]||u[f]||a;return r?o.createElement(y,c(c({ref:t},p),{},{components:r})):o.createElement(y,c({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,c=new Array(a);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var s=2;s<a;s++)c[s]=r[s];return o.createElement.apply(null,c)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8168:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=r(7462),n=(r(7294),r(3905));const a={sidebar_position:23},c=void 0,i={unversionedId:"Contracts/Market/NRC-23 SubPool",id:"Contracts/Market/NRC-23 SubPool",title:"NRC-23 SubPool",description:"newcoin.pools contract swaps $GNCO for Licensing Credit Tokens LCT, which represent a fraction of ownership for all the assets owned by the treasury of the pool, especially all the $GNCO staked by the SubPool creator, their fans, clients and patrons.",source:"@site/docs/Contracts/Market/NRC-23 SubPool.md",sourceDirName:"Contracts/Market",slug:"/Contracts/Market/NRC-23 SubPool",permalink:"/docs/Contracts/Market/NRC-23 SubPool",draft:!1,editUrl:"https://github.com/Newcoin-Foundation/docs/tree/main/packages/docs/Contracts/Market/NRC-23 SubPool.md",tags:[],version:"current",sidebarPosition:23,frontMatter:{sidebar_position:23},sidebar:"tutorialSidebar",previous:{title:"NRC-22 MainPool",permalink:"/docs/Contracts/Market/NRC-22 MainPool"},next:{title:"NRC-24 Socializer",permalink:"/docs/Contracts/Market/NRC-24 Socializer"}},l={},s=[{value:"Create a Pool",id:"create-a-pool",level:3}],p={toc:s};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"newcoin.pools contract swaps $GNCO for Licensing Credit Tokens LCT, which represent a fraction of ownership for all the assets owned by the treasury of the pool, especially all the $GNCO staked by the SubPool creator, their fans, clients and patrons. "),(0,n.kt)("h1",{id:"pool-actions"},"Pool Actions"),(0,n.kt)("h3",{id:"create-a-pool"},"Create a Pool"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"You can only create one pool per User."),"  "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},'const nco = new NCO_BlockchainAPI(\n    NCO_BlockchainAPI.defaults.devnet_urls, NCO_BlockchainAPI.defaults.devnet_services\n);\nnco.createPool({\n        owner: "satoshi.io", //string;\n        owner_prv_active_key:  "<private key>", //string;\n        ticker: "wBTC" //string - cannot be changed afterwards!!!;\n    }).then((res) => {\n   console.log("Transaction ID: " + res?.TxID_createPool)\n}).catch((error) => console.log("Error: "+error))\n        \n')),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Requires: private key, Errors: auth"),(0,n.kt)("p",null,"Requires: Authorization from Account "),(0,n.kt)("p",null,"Errors: "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: Invalid checksum ..."'),": Authentication Error - probably that payer & Payer private key do not match"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: transaction declares authority ..."'),": Authentication Error - seems the payer and private key do not match"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},'"Error: create_dao: pool already exist"'),": Create a pool first\nTBD"))))}u.isMDXComponent=!0}}]);